kind: deployment

image:
 repository: shashwot/nginx-more
 pullPolicy: Always
 tag: “latest”

registry:
  enabled: false
  dockerconfig: ""
  dockerconfigjson: ""

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080

configmap:
  enabled: false
  values:
    REDIS_HOST: redis
    REDIS_PORT: 6379

secrets:
  enabled: true
  secretName: test
  envFrom:
    - secretRef:
        name: test
  values:
    REDIS_PASS: redis@1234
    REDIS_PASS2: redis@1234

#Configuración de ingress
ingress:
  enabled: true
  annotations: 
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "600m"
    nginx.org/client-max-body-size: "600m"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "256k"
    kubernetes.io/tls-acme: 'true'
    cert-manager.io/acme-challenge-type: dns01
    cert-manager.io/acme-dns01-provider: azure-dns
  className: "nginx"
  pathtype: Prefix
  hosts:
    - host: chart-example.local
      paths:
        - path: /
  tls: 
   - secretName: chart-example-tls
     hosts:
       - chart-example.local

autoscaling:
  enabled: false

containerPort: 8080
nameOverride: test2
selectorLabels: testLabel

namespaceConfig:
  enabled: true
  name: test

container:
  name: test

# serviceaccount:
#   enabled: true
#   name: test-sa

dockerconfig: test

replicas:
  replicaCount: 1

persistentVolume:
  enabled: false

#Configuraciones de seguridad
podSecurityContext: {}
resources: {}
securityContext:
  privileged: false
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1001